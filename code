#include <bits/stdc++.h>
using namespace std;

//////////////////////////////////////////////////////////
//                      Book Class                      //
//////////////////////////////////////////////////////////
class Book 
{
public:
	string name;
	string author;
	int id;
	int copies;
	Book* next;

	Book(string name1, string author1, int id1,int copies1)
	{
		name=name1;
		author=author1;
		id=id1;
		copies=copies1;
		next=NULL;
	}
};

//////////////////////////////////////////////////////////
//                    Student Class                     //
//////////////////////////////////////////////////////////
class Student
{
public:
	string name;
	string email;
	string book;
	string author;
	int id;
	Student* next;

	Student(string name1, string email1, string book1, string author1, int id1)
	{
		name=name1;
		email=email1;
		book=book1;
		author=author1;
		id=id1;
		next=NULL;
	}
};

//////////////////////////////////////////////////////////
//                LibrarySystem Class                   //
//////////////////////////////////////////////////////////
class LibrarySystem 
{
private:
	Book* start_lib = nullptr;
	Student* start = nullptr;

public:
	void run();

private:
	// System Interface
	void greetings();
	void main_menu();

	// Book/Student Management
	void initialize_lib();
	void issue_book();
	void return_book();
	void display_students();
	void display_books(); 

	// Internal Utilities
	void delete_book(int); 
	void add_book(const string&, const string&, int, int);
};

//////////////////////////////////////////////////////////
//               LibrarySystem Definitions              //
//////////////////////////////////////////////////////////

void LibrarySystem::run() 
{
	initialize_lib();
	greetings();
	main_menu();
}

void LibrarySystem::greetings() 
{
	cout << "\n\n\t\t****************************************\n";
	cout << "\t\t*      WELCOME TO STUDENT LIBRARY      *\n";
	cout << "\t\t****************************************\n";
}

void LibrarySystem::main_menu() 
{
	int choice;
	do {
		cout << "\n************** MAIN MENU **************\n";
		cout << "1. ISSUE BOOK\n";
		cout << "2. RETURN BOOK\n";
		cout << "3. DISPLAY STUDENT DETAILS\n";
		cout << "4. DISPLAY AVAILABLE BOOKS\n";
		cout << "5. EXIT\n";
		cout << "Enter your choice: ";
		cin >> choice;
		cin.ignore();

		switch (choice) 
		{
		case 1:
			issue_book();
			break;
		case 2:
			return_book();
			break;
		case 3:
			display_students();
			break;
		case 4:
			display_books();
			break;
		case 5:
			exit(0);
		default:
			cout << "\nInvalid option. Try again.\n";
		}
	} while (choice != 5);
}

void LibrarySystem::initialize_lib() 
{
	string names[] = {"Operating Systems", "Database Management Systems", "Computer Organisation", "Computer Networks", "Engineering Mathematics"};
	string authors[] = {"Galvin", "Raghu Ramakrishnan", "Morris Mano", "Andrew S.Tanenbaum", "BS Grewel"};
	int ids[] = {101, 102, 103, 104, 105};
	int copies[] = {3, 2, 4, 2, 5};

	Book* tail = nullptr;
	for (int i = 0; i < 5; ++i) 
	{
		Book* new_book = new Book(names[i], authors[i], ids[i], copies[i]);
		if (!start_lib)
			start_lib = new_book;
		else
			tail->next = new_book;
		tail = new_book;
	}
}

void LibrarySystem::display_books() 
{
    
	if (!start_lib) 
	{
		cout << "\nLibrary has no books.\n";
		return;
	}

	cout << "\n************** Books In Library **************\n";
	Book* ptr = start_lib;
	while (ptr) 
	{
		cout << "Book ID: " << ptr->id<< " | " << ptr->name<< " by " << ptr->author<< " | Copies: " << ptr->copies << "\n";
		ptr = ptr->next;
	}
}

void LibrarySystem::issue_book() 
{
	if (!start_lib) 
	{
		cout << "\nNo books left in the library to issue!\n";
		return;
	}


	int id;
	cout << "\nEnter the Book ID to issue: ";
	cin >> id;

	Book* ptr = start_lib;
	while (ptr && ptr->id != id) ptr = ptr->next;

	if (ptr && ptr->copies > 0) 
	{
		string student_name, student_email;
		cin.ignore();
		cout << "\nEnter your Name: ";
		getline(cin, student_name);
		cout << "Enter your Email: ";
		getline(cin, student_email);

		Student* new_student = new Student(student_name, student_email, ptr->name, ptr->author, ptr->id);

		if (!start)
			start = new_student;
		else 
		{
			Student* s = start;
			while (s->next) 
		    	s = s->next;
			s->next = new_student;
		}

		ptr->copies--; // Just decrement copies
		cout << "\nBook issued successfully!\n";
	} 
	else 
	{
		cout << "\nInvalid Book ID or no copies available.\n";
	}
}

void LibrarySystem::return_book() 
{
	if (!start) 
	{
		cout << "\nNo books issued yet.\n";
		return;
	}

	int id;
	cout << "\nEnter Book ID to return: ";
	cin >> id;

	Student* ptr = start;
	Student* prev = nullptr;

	while (ptr && ptr->id != id) 
	{
		prev = ptr;
		ptr = ptr->next;
	}

	if (ptr)
	{
		// Find the book and increment copies
		Book* book_ptr = start_lib;
		while (book_ptr && book_ptr->id != id)
		    book_ptr = book_ptr->next;

		if (book_ptr) 
		{
			book_ptr->copies++;
		} 
		else 
		{
			// If book doesn't exist (shouldn't happen now), re-add it
			add_book(ptr->book, ptr->author, ptr->id, 1);
		}

		if (!prev)
			start = ptr->next;
		else
			prev->next = ptr->next;

		delete ptr;
		cout << "\nBook returned successfully!\n";
	} 
	else 
	{
		cout << "\nNo record found for the given Book ID.\n";
	}
}

void LibrarySystem::display_students() 
{
	if (!start) 
	{
		cout << "\nNo student data available.\n";
		return;
	}

	Student* ptr = start;
	while (ptr) 
	{
		cout << "\nStudent: " << ptr->name
		     << "\nEmail: " << ptr->email
		     << "\nBook: " << ptr->book << " by " << ptr->author << " (ID: " << ptr->id << ")\n";
		ptr = ptr->next;
	}
}

void LibrarySystem::delete_book(int id) 
{
	Book* ptr = start_lib;
	Book* prev = nullptr;

	while (ptr && ptr->id != id) 
	{
		prev = ptr;
		ptr = ptr->next;
	}

	if (!ptr) return;

	if (!prev)
		start_lib = ptr->next;
	else
		prev->next = ptr->next;

	delete ptr;
}

void LibrarySystem::add_book(const string& bookname, const string& authorname, int id, int copies)
{
	Book* ptr = start_lib;
	while (ptr)
	{
		if (ptr->id == id) 
		{
			ptr->copies += copies;
			return;
		}
		ptr = ptr->next;
	}

	Book* new_book = new Book(bookname, authorname, id, copies);
	if (!start_lib)
		start_lib = new_book;
	else 
	{
		Book* temp = start_lib;
		while (temp->next) temp = temp->next;
		temp->next = new_book;
	}
}

//////////////////////////////////////////////////////////
//                       Main                           //
//////////////////////////////////////////////////////////
int main() 
{
	LibrarySystem lib;
	lib.run();
	return 0;
}

